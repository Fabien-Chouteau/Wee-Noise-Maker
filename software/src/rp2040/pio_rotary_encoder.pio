; Based on:
; https://github.com/GitJer/Some_RPI-Pico_stuff/blob/main/Rotary_encoder/pio_rotary_encoder.pio

; Frequency of execution is important, this should not run too fast.
; 10kHz seems good for hand turn incremental rotary

; Changes:
; - Relative IRQ
; - Disable IRQ for second detent
; - Sideset for debug

.program pio_rotary_encoder
.wrap_target

.side_set 2 ; Sideset used for debugging the program...

.origin 0                  ; The jump table has to start at 0
                           ; it contains the correct jumps for each of the 16
                           ; combination of 4 bits formed by A'B'AB
                           ; A = current reading of pin_A of the rotary encoder
                           ; A' = previous reading of pin_A of the rotary encoder
                           ; B = current reading of pin_B of the rotary encoder
                           ; B' = previous reading of pin_B of the rotary encoder
    jmp read     side 0b00 ; 0000 = from 00 to 00 = no change in reading
    jmp CW       side 0b00 ; 0001 = from 00 to 01 = clockwise rotation           - CW
    jmp CCW      side 0b00 ; 0010 = from 00 to 10 = counter clockwise rotation   - CCW
    jmp read     side 0b00 ; 0011 = from 00 to 11 = error

    jmp read     side 0b00 ; CCW (Ignored to avoid double irq on one detent) 0100 = from 01 to 00 = counter clockwise rotation   - CCW
    jmp read     side 0b00 ; 0101 = from 01 to 01 = no change in reading
    jmp read     side 0b00 ; 0110 = from 01 to 10 = error
    jmp read     side 0b00 ; CW (Ignored to avoid double irq on one detent) 0111 = from 01 to 11 = clockwise rotation           - CW

    jmp read     side 0b00 ; CW (Ignored to avoid double irq on one detent) 1000 = from 10 to 00 = clockwise rotation           - CW
    jmp read     side 0b00 ; 1001 = from 10 to 01 = error
    jmp read     side 0b00 ; 1010 = from 10 to 10 = no change in reading
    jmp read     side 0b00 ; CCW (Ignored to avoid double irq on one detent) 1011 = from 10 to 11 = counter clockwise rotation   - CCW

    jmp read     side 0b00 ; 1100 = from 11 to 00 = error
    jmp CCW      side 0b00 ; 1101 = from 11 to 01 = counter clockwise rotation   - CCW
    jmp CW       side 0b00 ; 1110 = from 11 to 10 = clockwise rotation           - CW
    jmp read     side 0b00 ; 1111 = from 11 to 11 = no change in reading

pc_start:                  ; this is the entry point for the program
    in pins 2    side 0b00 ; read the current values of A and B and use
                           ; them to initialize the previous values (A'B')
read:
    mov OSR ISR  side 0b00 ; the OSR is (after the next instruction) used to shift
                           ; the two bits with the previous values into the ISR
    out ISR 2    side 0b00 ; shift the previous value into the ISR. This also sets
                           ; all other bits in the ISR to 0
    in pins 2    side 0b01 ; shift the current value into the ISR
                           ; the 16 LSB of the ISR now contain 000000000000A'B'AB
                           ; this represents a jmp instruction to the address A'B'AB
    mov exec ISR side 0b00 ; do the jmp encoded in the ISR
CW:                        ; a clockwise rotation was detected
    irq 0 rel    side 0b10 ; signal a clockwise rotation via an IRQ (See comment below)
    jmp read     side 0b00 ; jump to reading the current values of A and B
CCW:                       ; a counter clockwise rotation was detected
    irq 2 rel    side 0b10 ; signal a counter clockwise rotation via an IRQ (See comment below)
;    jmp read              ; jump to reading the current values of A and B.
                           ; the jmp isn't needed because of the .wrap, and the first
                           ; statement of the program happens to be a jmp read
.wrap

; IRQ mapping
; Acording to the rp2040 documentation, when the MSB of the Index value for an
; IRQ instruction is 1, the State Machine ID (SM) is added to the 3 LSB of the
; Index (modulo 4).
;
; To be able to have two SM running this code, we use IRQ indexes 0 and 2 and
; SM 0 and 1. This we will give use the following IRQs:
;
;  - SM 0:
;    - Clockwise: IRQ 0
;    - Counter Clockwise: IRQ 2
;  - SM 1:
;    - Clockwise: IRQ 1
;    - Counter Clockwise: IRQ 3

